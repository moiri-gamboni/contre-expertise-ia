diff --git a/node_modules/regex-recursion/dist/regex-recursion.cjs b/node_modules/regex-recursion/dist/regex-recursion.cjs
new file mode 100644
index 0000000..78d3ba8
--- /dev/null
+++ b/node_modules/regex-recursion/dist/regex-recursion.cjs
@@ -0,0 +1,218 @@
+var __defProp = Object.defineProperty;
+var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
+var __getOwnPropNames = Object.getOwnPropertyNames;
+var __hasOwnProp = Object.prototype.hasOwnProperty;
+var __export = (target, all) => {
+  for (var name in all)
+    __defProp(target, name, { get: all[name], enumerable: true });
+};
+var __copyProps = (to, from, except, desc) => {
+  if (from && typeof from === "object" || typeof from === "function") {
+    for (let key of __getOwnPropNames(from))
+      if (!__hasOwnProp.call(to, key) && key !== except)
+        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
+  }
+  return to;
+};
+var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
+
+// src/index.js
+var src_exports = {};
+__export(src_exports, {
+  recursion: () => recursion
+});
+module.exports = __toCommonJS(src_exports);
+
+// ../regex-utilities/src/index.js
+var Context = Object.freeze({
+  DEFAULT: "DEFAULT",
+  CHAR_CLASS: "CHAR_CLASS"
+});
+function replaceUnescaped(expression, needle, replacement, context) {
+  const re = new RegExp(String.raw`${needle}|(?<$skip>\[\^?|\\?.)`, "gsu");
+  const negated = [false];
+  let numCharClassesOpen = 0;
+  let result = "";
+  for (const match of expression.matchAll(re)) {
+    const { 0: m, groups: { $skip } } = match;
+    if (!$skip && (!context || context === Context.DEFAULT === !numCharClassesOpen)) {
+      if (replacement instanceof Function) {
+        result += replacement(match, {
+          context: numCharClassesOpen ? Context.CHAR_CLASS : Context.DEFAULT,
+          negated: negated[negated.length - 1]
+        });
+      } else {
+        result += replacement;
+      }
+      continue;
+    }
+    if (m[0] === "[") {
+      numCharClassesOpen++;
+      negated.push(m[1] === "^");
+    } else if (m === "]" && numCharClassesOpen) {
+      numCharClassesOpen--;
+      negated.pop();
+    }
+    result += m;
+  }
+  return result;
+}
+function forEachUnescaped(expression, needle, callback, context) {
+  replaceUnescaped(expression, needle, callback, context);
+}
+function execUnescaped(expression, needle, pos = 0, context) {
+  if (!new RegExp(needle, "su").test(expression)) {
+    return null;
+  }
+  const re = new RegExp(`${needle}|(?<$skip>\\\\?.)`, "gsu");
+  re.lastIndex = pos;
+  let numCharClassesOpen = 0;
+  let match;
+  while (match = re.exec(expression)) {
+    const { 0: m, groups: { $skip } } = match;
+    if (!$skip && (!context || context === Context.DEFAULT === !numCharClassesOpen)) {
+      return match;
+    }
+    if (m === "[") {
+      numCharClassesOpen++;
+    } else if (m === "]" && numCharClassesOpen) {
+      numCharClassesOpen--;
+    }
+    if (re.lastIndex == match.index) {
+      re.lastIndex++;
+    }
+  }
+  return null;
+}
+function hasUnescaped(expression, needle, context) {
+  return !!execUnescaped(expression, needle, 0, context);
+}
+function getGroupContents(expression, contentsStartPos) {
+  const token2 = /\\?./gsu;
+  token2.lastIndex = contentsStartPos;
+  let contentsEndPos = expression.length;
+  let numCharClassesOpen = 0;
+  let numGroupsOpen = 1;
+  let match;
+  while (match = token2.exec(expression)) {
+    const [m] = match;
+    if (m === "[") {
+      numCharClassesOpen++;
+    } else if (!numCharClassesOpen) {
+      if (m === "(") {
+        numGroupsOpen++;
+      } else if (m === ")") {
+        numGroupsOpen--;
+        if (!numGroupsOpen) {
+          contentsEndPos = match.index;
+          break;
+        }
+      }
+    } else if (m === "]") {
+      numCharClassesOpen--;
+    }
+  }
+  return expression.slice(contentsStartPos, contentsEndPos);
+}
+
+// src/index.js
+var gRToken = String.raw`\\g<(?<gRName>[^>&]+)&R=(?<gRDepth>\d+)>`;
+var recursiveToken = String.raw`\(\?R=(?<rDepth>\d+)\)|${gRToken}`;
+var namedCapturingDelim = String.raw`\(\?<(?![=!])(?<captureName>[^>]+)>`;
+var token = new RegExp(String.raw`${namedCapturingDelim}|${recursiveToken}|\\?.`, "gsu");
+function recursion(expression) {
+  if (!hasUnescaped(expression, recursiveToken, Context.DEFAULT)) {
+    return expression;
+  }
+  if (hasUnescaped(expression, String.raw`\\[1-9]`, Context.DEFAULT)) {
+    throw new Error(`Numbered backrefs cannot be used with recursion; use named backref`);
+  }
+  if (hasUnescaped(expression, String.raw`\(\?\(DEFINE\)`, Context.DEFAULT)) {
+    throw new Error(`DEFINE groups cannot be used with recursion`);
+  }
+  const groupContentsStartPos = /* @__PURE__ */ new Map();
+  let numCharClassesOpen = 0;
+  let match;
+  token.lastIndex = 0;
+  while (match = token.exec(expression)) {
+    const { 0: m, groups: { captureName, rDepth, gRName, gRDepth } } = match;
+    if (m === "[") {
+      numCharClassesOpen++;
+    } else if (!numCharClassesOpen) {
+      if (captureName) {
+        groupContentsStartPos.set(captureName, token.lastIndex);
+      } else if (rDepth) {
+        const maxDepth = +rDepth;
+        assertMaxInBounds(maxDepth);
+        const pre = expression.slice(0, match.index);
+        const post = expression.slice(token.lastIndex);
+        assertNoFollowingRecursion(post);
+        return makeRecursive(pre, post, maxDepth, false);
+      } else if (gRName) {
+        const maxDepth = +gRDepth;
+        assertMaxInBounds(maxDepth);
+        const outsideOwnGroupMsg = `Recursion via \\g<${gRName}&R=${gRDepth}> must be used within the referenced group`;
+        if (!groupContentsStartPos.has(gRName)) {
+          throw new Error(outsideOwnGroupMsg);
+        }
+        const startPos = groupContentsStartPos.get(gRName);
+        const recursiveGroupContents = getGroupContents(expression, startPos);
+        if (!hasUnescaped(recursiveGroupContents, gRToken, Context.DEFAULT)) {
+          throw new Error(outsideOwnGroupMsg);
+        }
+        const pre = expression.slice(startPos, match.index);
+        const post = recursiveGroupContents.slice(pre.length + m.length);
+        assertNoFollowingRecursion(post);
+        return expression.slice(0, startPos) + makeRecursive(pre, post, maxDepth, true) + expression.slice(startPos + recursiveGroupContents.length);
+      }
+    } else if (m === "]") {
+      numCharClassesOpen--;
+    }
+  }
+  throw new Error("Unexpected error; recursion was not processed");
+}
+function assertMaxInBounds(max) {
+  if (max < 2 || max > 100) {
+    throw new Error(`Max depth must be between 2 and 100; used ${max}`);
+  }
+}
+function assertNoFollowingRecursion(remainingExpression) {
+  if (hasUnescaped(remainingExpression, recursiveToken, Context.DEFAULT)) {
+    throw new Error("Recursion can only be used once per regex");
+  }
+}
+function makeRecursive(pre, post, maxDepth, isSubpattern) {
+  const namesInRecursed = /* @__PURE__ */ new Set();
+  if (isSubpattern) {
+    forEachUnescaped(pre + post, namedCapturingDelim, ({ groups: { captureName } }) => {
+      namesInRecursed.add(captureName);
+    }, Context.DEFAULT);
+  }
+  const reps = maxDepth - 1;
+  return `${pre}${repeatWithDepth(`(?:${pre}`, reps, isSubpattern ? namesInRecursed : null)}(?:)${repeatWithDepth(`${post})`, reps, isSubpattern ? namesInRecursed : null, "backward")}${post}`;
+}
+function repeatWithDepth(expression, reps, namesInRecursed, direction = "forward") {
+  const startNum = 2;
+  const depthNum = (i) => direction === "backward" ? reps - i + startNum - 1 : i + startNum;
+  let result = "";
+  for (let i = 0; i < reps; i++) {
+    const captureNum = depthNum(i);
+    result += replaceUnescaped(
+      expression,
+      String.raw`${namedCapturingDelim}|\\k<(?<backref>[^>]+)>`,
+      ({ 0: m, groups: { captureName, backref } }) => {
+        if (backref && namesInRecursed && !namesInRecursed.has(backref)) {
+          return m;
+        }
+        const suffix = `_$${captureNum}`;
+        return captureName ? `(?<${captureName}${suffix}>` : `\\k<${backref}${suffix}>`;
+      },
+      Context.DEFAULT
+    );
+  }
+  return result;
+}
+// Annotate the CommonJS export names for ESM import in node:
+0 && (module.exports = {
+  recursion
+});
diff --git a/node_modules/regex-recursion/dist/regex-recursion.min.js b/node_modules/regex-recursion/dist/regex-recursion.min.js
index 3b5f580..0f030f6 100644
--- a/node_modules/regex-recursion/dist/regex-recursion.min.js
+++ b/node_modules/regex-recursion/dist/regex-recursion.min.js
@@ -1 +1 @@
-var Regex;(Regex||={}).plugins=(()=>{var w=Object.defineProperty;var T=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var b=Object.prototype.hasOwnProperty;var I=(e,t)=>{for(var n in t)w(e,n,{get:t[n],enumerable:!0})},S=(e,t,n,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of N(t))!b.call(e,r)&&r!==n&&w(e,r,{get:()=>t[r],enumerable:!(s=T(t,r))||s.enumerable});return e};var O=e=>S(w({},"__esModule",{value:!0}),e);var M={};I(M,{recursion:()=>v});var l=Object.freeze({DEFAULT:"DEFAULT",CHAR_CLASS:"CHAR_CLASS"});function m(e,t,n,s){let r=new RegExp(`${t}|(?<skip>\\\\?.)`,"gsu"),c=0,u="";for(let o of e.matchAll(r)){let{0:a,groups:{skip:f}}=o;if(!f&&(!s||s===l.DEFAULT==!c)){n instanceof Function?u+=n(o):u+=n;continue}a==="["?c++:a==="]"&&c&&c--,u+=a}return u}function U(e,t,n,s){m(e,t,n,s)}function G(e,t,n=0,s){if(!new RegExp(t,"su").test(e))return null;let r=new RegExp(`${t}|(?<skip>\\\\?.)`,"gsu");r.lastIndex=n;let c=0,u;for(;u=r.exec(e);){let{0:o,groups:{skip:a}}=u;if(!a&&(!s||s===l.DEFAULT==!c))return u;o==="["?c++:o==="]"&&c&&c--,r.lastIndex==u.index&&r.lastIndex++}return null}function d(e,t,n){return!!G(e,t,0,n)}function x(e,t){let n=/\\?./gsu;n.lastIndex=t;let s=e.length,r=0,c=1,u;for(;u=n.exec(e);){let[o]=u;if(o==="[")r++;else if(r)o==="]"&&r--;else if(o==="(")c++;else if(o===")"&&(c--,!c)){s=u.index;break}}return e.slice(t,s)}var L=String.raw`\\g<(?<gRName>[^>&]+)&R=(?<gRDepth>\d+)>`,E=String.raw`\(\?R=(?<rDepth>\d+)\)|${L}`,D=String.raw`\(\?<(?![=!])(?<captureName>[^>]+)>`,g=new RegExp(String.raw`${D}|${E}|\\?.`,"gsu");function v(e){if(!d(e,E,l.DEFAULT))return e;if(d(e,String.raw`\\[1-9]`,l.DEFAULT))throw new Error("Numbered backrefs cannot be used with recursion; use named backref");if(d(e,String.raw`\(\?\(DEFINE\)`,l.DEFAULT))throw new Error("DEFINE groups cannot be used with recursion");let t=new Map,n=0,s;for(g.lastIndex=0;s=g.exec(e);){let{0:r,groups:{captureName:c,rDepth:u,gRName:o,gRDepth:a}}=s;if(r==="[")n++;else if(n)r==="]"&&n--;else if(c)t.set(c,g.lastIndex);else if(u){let f=+u;R(f);let h=e.slice(0,s.index),i=e.slice(g.lastIndex);return A(i),k(h,i,f,!1)}else if(o){let f=+a;R(f);let h=`Recursion via \\g<${o}&R=${a}> must be used within the referenced group`;if(!t.has(o))throw new Error(h);let i=t.get(o),p=x(e,i);if(!d(p,L,l.DEFAULT))throw new Error(h);let $=e.slice(i,s.index),C=p.slice($.length+r.length);return A(C),e.slice(0,i)+k($,C,f,!0)+e.slice(i+p.length)}}throw new Error("Unexpected error; recursion was not processed")}function R(e){if(e<2||e>100)throw new Error(`Max depth must be between 2 and 100; used ${e}`)}function A(e){if(d(e,E,l.DEFAULT))throw new Error("Recursion can only be used once per regex")}function k(e,t,n,s){let r=new Set;s&&U(e+t,D,({groups:{captureName:u}})=>{r.add(u)},l.DEFAULT);let c=n-1;return`${e}${F(`(?:${e}`,c,s?r:null)}(?:)${F(`${t})`,c,s?r:null,"backward")}${t}`}function F(e,t,n,s="forward"){let c=o=>s==="backward"?t-o+2-1:o+2,u="";for(let o=0;o<t;o++){let a=c(o);u+=m(e,String.raw`${D}|\\k<(?<backref>[^>]+)>`,({0:f,groups:{captureName:h,backref:i}})=>{if(i&&n&&!n.has(i))return f;let p=`_$${a}`;return h?`(?<${h}${p}>`:`\\k<${i}${p}>`},l.DEFAULT)}return u}return O(M);})();
+var Regex;(Regex||={}).plugins=(()=>{var w=Object.defineProperty;var T=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var N=Object.prototype.hasOwnProperty;var b=(e,t)=>{for(var n in t)w(e,n,{get:t[n],enumerable:!0})},I=(e,t,n,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of S(t))!N.call(e,r)&&r!==n&&w(e,r,{get:()=>t[r],enumerable:!(s=T(t,r))||s.enumerable});return e};var O=e=>I(w({},"__esModule",{value:!0}),e);var M={};b(M,{recursion:()=>v});var i=Object.freeze({DEFAULT:"DEFAULT",CHAR_CLASS:"CHAR_CLASS"});function E(e,t,n,s){let r=new RegExp(String.raw`${t}|(?<$skip>\[\^?|\\?.)`,"gsu"),u=[!1],c=0,o="";for(let f of e.matchAll(r)){let{0:a,groups:{$skip:p}}=f;if(!p&&(!s||s===i.DEFAULT==!c)){n instanceof Function?o+=n(f,{context:c?i.CHAR_CLASS:i.DEFAULT,negated:u[u.length-1]}):o+=n;continue}a[0]==="["?(c++,u.push(a[1]==="^")):a==="]"&&c&&(c--,u.pop()),o+=a}return o}function U(e,t,n,s){E(e,t,n,s)}function G(e,t,n=0,s){if(!new RegExp(t,"su").test(e))return null;let r=new RegExp(`${t}|(?<$skip>\\\\?.)`,"gsu");r.lastIndex=n;let u=0,c;for(;c=r.exec(e);){let{0:o,groups:{$skip:f}}=c;if(!f&&(!s||s===i.DEFAULT==!u))return c;o==="["?u++:o==="]"&&u&&u--,r.lastIndex==c.index&&r.lastIndex++}return null}function h(e,t,n){return!!G(e,t,0,n)}function x(e,t){let n=/\\?./gsu;n.lastIndex=t;let s=e.length,r=0,u=1,c;for(;c=n.exec(e);){let[o]=c;if(o==="[")r++;else if(r)o==="]"&&r--;else if(o==="(")u++;else if(o===")"&&(u--,!u)){s=c.index;break}}return e.slice(t,s)}var L=String.raw`\\g<(?<gRName>[^>&]+)&R=(?<gRDepth>\d+)>`,m=String.raw`\(\?R=(?<rDepth>\d+)\)|${L}`,$=String.raw`\(\?<(?![=!])(?<captureName>[^>]+)>`,d=new RegExp(String.raw`${$}|${m}|\\?.`,"gsu");function v(e){if(!h(e,m,i.DEFAULT))return e;if(h(e,String.raw`\\[1-9]`,i.DEFAULT))throw new Error("Numbered backrefs cannot be used with recursion; use named backref");if(h(e,String.raw`\(\?\(DEFINE\)`,i.DEFAULT))throw new Error("DEFINE groups cannot be used with recursion");let t=new Map,n=0,s;for(d.lastIndex=0;s=d.exec(e);){let{0:r,groups:{captureName:u,rDepth:c,gRName:o,gRDepth:f}}=s;if(r==="[")n++;else if(n)r==="]"&&n--;else if(u)t.set(u,d.lastIndex);else if(c){let a=+c;A(a);let p=e.slice(0,s.index),l=e.slice(d.lastIndex);return R(l),F(p,l,a,!1)}else if(o){let a=+f;A(a);let p=`Recursion via \\g<${o}&R=${f}> must be used within the referenced group`;if(!t.has(o))throw new Error(p);let l=t.get(o),g=x(e,l);if(!h(g,L,i.DEFAULT))throw new Error(p);let D=e.slice(l,s.index),C=g.slice(D.length+r.length);return R(C),e.slice(0,l)+F(D,C,a,!0)+e.slice(l+g.length)}}throw new Error("Unexpected error; recursion was not processed")}function A(e){if(e<2||e>100)throw new Error(`Max depth must be between 2 and 100; used ${e}`)}function R(e){if(h(e,m,i.DEFAULT))throw new Error("Recursion can only be used once per regex")}function F(e,t,n,s){let r=new Set;s&&U(e+t,$,({groups:{captureName:c}})=>{r.add(c)},i.DEFAULT);let u=n-1;return`${e}${k(`(?:${e}`,u,s?r:null)}(?:)${k(`${t})`,u,s?r:null,"backward")}${t}`}function k(e,t,n,s="forward"){let u=o=>s==="backward"?t-o+2-1:o+2,c="";for(let o=0;o<t;o++){let f=u(o);c+=E(e,String.raw`${$}|\\k<(?<backref>[^>]+)>`,({0:a,groups:{captureName:p,backref:l}})=>{if(l&&n&&!n.has(l))return a;let g=`_$${f}`;return p?`(?<${p}${g}>`:`\\k<${l}${g}>`},i.DEFAULT)}return c}return O(M);})();
